#!/usr/bin/env python
# -*- coding:utf-8 -*-

'''
5. 假设有一个数组，只有一个数出现一次，其他数都出现三次，求出现一次的数。
'''

#利用二进制，出现三次的数的二进制某位如果为1，则1必定出现3次，因此，如果该位上的1出现次数不是3的倍数，则说明出现一次的数在该位上是1
#p.s. 这个代码有点难，不懂要问我
def func(nums):
    sum = 0
    result = 0
    for i in range(32):
        sum = 0
        for n in nums:
            # >> 是右移运算符，右移运算是将一个二进制位的操作数按指定移动的位数向右移动，移出位被丢弃，左边移出的空位或者一律补0
            # &  是与运算符，0&0=1，因此，通过&1，可以取出最后一位的那个数（0或1）
            #通过右移运算符和与运算可以实现取某一位上的数
            if (n >> i) & 1:
                sum += 1
        # << 是左移运算符，右移运算是将一个二进制位的操作数按指定移动的位数向左移位，移出位被丢弃，右边的空位一律补0
        # |  是或运算符，0|1=1，因此，通过|1，可以将取出1加到结果中
        if sum % 3 == 1:
            result |= 1 << i
    return result

print(func([1, 2, 2, 10, 1, 4, 5, 4, 5, 1, 2, 5, 4]))